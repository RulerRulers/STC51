C51 COMPILER V9.50a   KEY                                                                  05/17/2019 16:38:38 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN .\Objects\key.obj
COMPILER INVOKED BY: D:\KEIL4\C51\BIN\C51.EXE src\key.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\key.lst) TABS(2) OBJE
                    -CT(.\Objects\key.obj)

line level    source

   1          /*
   2           * Copyright        : ShenDong MCU studio.
   3           * Description      : keyboard driver  
   4           * Created          : by oliverzhang@shendongmcu.com
   5           */
   6          
   7          #include "global.h"
   8          
   9          
  10          sbit LINE_F1 = P4^0;
  11          sbit LINE_F2 = P4^1;
  12          sbit LINE_F3 = P7^5;
  13          
  14          static unsigned char ScanKeyCode(void)
  15          {
  16   1        /*TEST_KEY on the head board.*/
  17   1        if(LINE_F1 == 0) return KEY_SET;
  18   1        if(LINE_F2 == 0) return KEY_MINUS;
  19   1        if(LINE_F3 == 0) return KEY_PLUS;
  20   1        /*No key pressed, return key_none.*/
  21   1        return KEY_NONE;
  22   1      }
  23          void key_Initialization(void)
  24          {
  25   1        LINE_F1 = 1;
  26   1        LINE_F2 = 1;
  27   1        LINE_F3 = 1;
  28   1      }
  29          
  30          void key_Task(void)
  31          {
  32   1        unsigned char key_code;
  33   1        unsigned long ticks = time_GetTicks();
  34   1        static unsigned long idata oldticks;
  35   1        static unsigned char idata old_code,state = 0;
  36   1        switch(state)
  37   1        {
  38   2        case 0:
  39   2          old_code = ScanKeyCode();
  40   2          if(old_code == KEY_NONE) break;
  41   2          oldticks = ticks;
  42   2          state = 1;
  43   2          break;
  44   2        case 1: /*de-bounce*/
  45   2          if(ticks - oldticks < 20) break;
  46   2          key_code = ScanKeyCode();
  47   2          if(key_code == old_code)
  48   2          {
  49   3            key_InsertKeyCode(key_code, KEY_PRESSED);
  50   3            oldticks = ticks;
  51   3            state = 2;
  52   3          }
  53   2          else
  54   2          {
C51 COMPILER V9.50a   KEY                                                                  05/17/2019 16:38:38 PAGE 2   

  55   3            state = 0;
  56   3          }
  57   2          break;
  58   2        case 2: /*Check for repeat*/
  59   2          key_code = ScanKeyCode();
  60   2          if(key_code == KEY_NONE) 
  61   2          {
  62   3            oldticks = ticks;
  63   3            state = 3;
  64   3          }
  65   2          else
  66   2          {
  67   3            if(ticks - oldticks > 250)
  68   3            {
  69   4              key_InsertKeyCode(old_code, KEY_REPEATED);
  70   4              oldticks = ticks;
  71   4            }
  72   3          }
  73   2          break;
  74   2        case 3: /*check for release*/
  75   2          if(ticks - oldticks < 20) break;
  76   2          key_code = ScanKeyCode();
  77   2          if(key_code == KEY_NONE)
  78   2          {
  79   3            key_InsertKeyCode(old_code, KEY_RELEASED);
  80   3            state = 0;
  81   3          }
  82   2          else 
  83   2          {
  84   3            oldticks = ticks;
  85   3          }
  86   2          break;
  87   2        default:
  88   2          break;
  89   2        }
  90   1      }
  91          
  92          #define KEY_FIFOLEN 4
  93          static struct _key_fifo_tag_{
  94            unsigned char keycode[KEY_FIFOLEN];
  95            unsigned char state[KEY_FIFOLEN];
  96            unsigned char rear;
  97            unsigned char top;
  98          } idata g_key_fifo;
  99          
 100          unsigned char key_GetKeyCode(unsigned char *pcode,unsigned char *pstate)
 101          {
 102   1        unsigned char rear = g_key_fifo.rear;
 103   1        if(rear != g_key_fifo.top)
 104   1        {
 105   2          if(pcode != NULL)*pcode = g_key_fifo.keycode[rear];
 106   2          if(pstate!= NULL)*pstate = g_key_fifo.state[rear];
 107   2          rear++;
 108   2          if(rear >= KEY_FIFOLEN) rear = 0;
 109   2          g_key_fifo.rear = rear;
 110   2          return 1;
 111   2        }
 112   1        return 0;
 113   1      }
 114          
 115          unsigned char key_InsertKeyCode(unsigned char keycode, unsigned char state)
 116          {
C51 COMPILER V9.50a   KEY                                                                  05/17/2019 16:38:38 PAGE 3   

 117   1        unsigned char top,next;
 118   1      
 119   1        //printf("insert key: code = %bu state=%bu\r\n",keycode,state);
 120   1        top = g_key_fifo.top;
 121   1        next = g_key_fifo.top + 1;
 122   1        if(next >= KEY_FIFOLEN) next = 0;
 123   1        if(next != g_key_fifo.rear)
 124   1        {
 125   2          g_key_fifo.keycode[top] = keycode;
 126   2          g_key_fifo.state[top] = state;
 127   2          g_key_fifo.top = next;
 128   2          return 1;
 129   2        }
 130   1        return 0;
 131   1      }
 132          
 133          void ProcessKey(void)
 134          {
 135   1        static unsigned char idata flash_mode = 0;
 136   1        unsigned char ret,keycode,keystate;
 137   1        
 138   1        ret = key_GetKeyCode(&keycode, &keystate);
 139   1        if(ret == 0) return;
 140   1        switch(keycode)
 141   1        {
 142   2          case KEY_F1: printf("KEY_F1");break;
 143   2          case KEY_F2: printf("KEY_F2");break;
 144   2          case KEY_F3: printf("KEY_F3");break;
 145   2          case KEY_F4: printf("KEY_F4");break;
 146   2          case KEY_1: printf("KEY_1");break;
 147   2          case KEY_2: printf("KEY_2");break;
 148   2          case KEY_3: printf("KEY_3");break;
 149   2          case KEY_4: printf("KEY_4");break;
 150   2          case KEY_5: printf("KEY_5");break;
 151   2          case KEY_6: printf("KEY_6");break;
 152   2          case KEY_7: printf("KEY_7");break;
 153   2          case KEY_8: printf("KEY_8");break;
 154   2          case KEY_9: printf("KEY_9");break;
 155   2          case KEY_0: printf("KEY_0");break;
 156   2          case KEY_ASTERISK: printf("KEY_ASTERISK");break;
 157   2          case KEY_POUND: printf("KEY_POUND");break;
 158   2          case KEY_LEFT: printf("KEY_LEFT");break;
 159   2          case KEY_UP: printf("KEY_UP");break;
 160   2          case KEY_DOWN: printf("KEY_DOWN");break;
 161   2          case KEY_RIGHT: printf("KEY_RIGHT");break;
 162   2          case KEY_SET: printf("KEY_SET");break;
 163   2          case KEY_MENU: printf("KEY_MENU");break;
 164   2          case KEY_MUTE: printf("KEY_MUTE");break;
 165   2          case KEY_TVAV: printf("KEY_TVAV");break;
 166   2          case KEY_DIGIT: printf("KEY_DIGIT");break;
 167   2          case KEY_AUTO: printf("KEY_AUTO");break;
 168   2          case KEY_OK: printf("KEY_OK");break;
 169   2          case KEY_POWER: printf("KEY_POWER");break;
 170   2          case KEY_PLUS: printf("KEY_PLUS");break;
 171   2          case KEY_MINUS: printf("KEY_MINUS");break;
 172   2          case KEY_RETURN: printf("KEY_RETURN");break;
 173   2          case KEY_CLEAR: printf("KEY_CLEAR");break;
 174   2          case KEY_CHANGEPIC: printf("KEY_CHANGEPIC");break;
 175   2          case KEY_EXIT: printf("KEY_EXIT");break;
 176   2          case KEY_PREVPAGE: printf("KEY_PREVPAGE");break;
 177   2          case KEY_NEXTPAGE: printf("KEY_NEXTPAGE");break;
 178   2          case KEY_CHANNELLIST: printf("KEY_CHANNELLIST");break;
C51 COMPILER V9.50a   KEY                                                                  05/17/2019 16:38:38 PAGE 4   

 179   2          case KEY_PROGRAMGUIDE: printf("KEY_PROGRAMGUIDE");break;
 180   2          case KEY_PROGRAMINFO: printf("KEY_PROGRAMINFO");break;
 181   2          case KEY_INFOSERVICE: printf("KEY_INFOSERVICE");break;
 182   2          case KEY_RED: printf("KEY_RED");break;
 183   2          case KEY_GREEN: printf("KEY_GREEN");break;
 184   2          case KEY_YELLOW: printf("KEY_YELLOW");break;
 185   2          case KEY_BLUE: printf("KEY_BLUE");break;
 186   2          default: printf("unknown key");break;
 187   2        }
 188   1        printf("  ");
 189   1        switch(keystate)
 190   1        {
 191   2          case KEY_PRESSED: printf("~~pressed.");break;
 192   2          case KEY_REPEATED:printf("<>repeated.");break;
 193   2          case KEY_RELEASED:printf("**released.");break;
 194   2          default: printf("impossible to run here.");break;
 195   2        }
 196   1        printf("\r\n");
 197   1        if(keycode == KEY_SET && keystate == KEY_PRESSED)
 198   1        {
 199   2          flash_mode++;
 200   2          if(flash_mode > 2) flash_mode = 0;
 201   2          led_SetFlashMode(flash_mode);
 202   2        }
 203   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1082    ----
   CONSTANT SIZE    =    486    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =     17    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
