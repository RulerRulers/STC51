C51 COMPILER V9.50a   RTC                                                                  05/17/2019 16:38:39 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE RTC
OBJECT MODULE PLACED IN .\Objects\rtc.obj
COMPILER INVOKED BY: D:\KEIL4\C51\BIN\C51.EXE src\rtc.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\rtc.lst) TABS(2) OBJE
                    -CT(.\Objects\rtc.obj)

line level    source

   1          /*
   2           * Copyright        : Shendong MCU studio
   3           * File Description : RTC PCF8563T driver
   4           * Created          : oliverzhang@shendongmcu.com
   5           */
   6          
   7          #include "global.h"
   8          static uint8_t Bcd2Bin(uint8_t bcd)
   9          {
  10   1        return ( ((bcd>>4)&0x0f)*10 + (bcd & 0x0f) );
  11   1      }
  12          
  13          static uint8_t Bin2Bcd(uint8_t bin)
  14          {
  15   1        return  (bin/10<<4 | bin%10);
  16   1      }
  17          
  18          extern void SET_IIC_SDA(void);
  19          static int Pcf8563WriteBytes(uint8_t sub_addr,const uint8_t *buf,uint8_t len)
  20          {
  21   1        uint8_t i, ack;
  22   1        
  23   1        i2c_StartCondition();
  24   1        ack = i2c_SendByteCheckAck(0xa2);
  25   1        if((ack&0x80)!=0)
  26   1        {
  27   2          i2c_StopCondition();
  28   2          return -1;
  29   2        }
  30   1        ack = i2c_SendByteCheckAck(sub_addr);
  31   1        if((ack&0x80)!=0)
  32   1        {
  33   2          i2c_StopCondition();
  34   2          return -2;
  35   2        }
  36   1        for(i=0;i<len;i++)
  37   1        {
  38   2          ack = i2c_SendByteCheckAck(buf[i]);
  39   2          if((ack&0x80)!=0)
  40   2          {
  41   3            i2c_StopCondition();
  42   3            return -3;
  43   3          }
  44   2        }
  45   1        i2c_StopCondition();
  46   1        return 0;
  47   1      }
  48          
  49          static int Pcf8563ReadBytes(uint8_t sub_addr,uint8_t *buf,uint8_t len)
  50          {
  51   1        uint8_t i, ack;
  52   1        i2c_StartCondition();
  53   1        ack = i2c_SendByteCheckAck(0xa2);
  54   1        if((ack&0x80)!=0)
C51 COMPILER V9.50a   RTC                                                                  05/17/2019 16:38:39 PAGE 2   

  55   1        {
  56   2          i2c_StopCondition();
  57   2          return -1;
  58   2        }
  59   1        ack = i2c_SendByteCheckAck(sub_addr);/*dummy write end here*/
  60   1        if((ack&0x80)!=0)
  61   1        {
  62   2          i2c_StopCondition();
  63   2          return -2;
  64   2        }
  65   1        SET_IIC_SDA();
  66   1        time_HoggingDelayUs(6);
  67   1        i2c_StartCondition();
  68   1        ack = i2c_SendByteCheckAck(0xa3);
  69   1        if((ack&0x80)!=0)
  70   1        {
  71   2          i2c_StopCondition();
  72   2          return -3;
  73   2        }
  74   1        for(i=0;i<len-1;i++)
  75   1        {
  76   2          buf[i]=i2c_ReceiveByteWithAck();
  77   2        }
  78   1        buf[i] = i2c_ReceiveByteWithoutAck();
  79   1        i2c_StopCondition();
  80   1        return 0;
  81   1      }
  82          
  83          int rtc_Initialization(void)
  84          {
  85   1        int ret;
  86   1        uint8_t xdata regs[16];
  87   1        ret = Pcf8563ReadBytes(13,&regs[13],1);
  88   1        if(ret < 0) 
  89   1        {
  90   2          printf("IIC fatal error.PCF8563 init failed.\r\n");
  91   2          return -10;
  92   2        }
  93   1        if((regs[13] & 0x03) != 0x03)
  94   1        {
  95   2          regs[0]=0x00;/*Clock is running*/
  96   2          regs[1]=0x00;/*disable alarm and timer interrupt*/
  97   2          regs[2]= 0x30; /*Second:  30*/
  98   2          regs[3]= 0x30; /*Minute:  30*/
  99   2          regs[4]= 0x12; /*Hour:    12*/ 
 100   2          regs[5]= 0x14; /*Day:     14*/   /*2014-04-14 12:30:30 Monday*/
 101   2          regs[6]= 0x01; /*Weekday: Monday*/
 102   2          regs[7]= 0x04; /*Month:   4*/
 103   2          regs[8]= 0x14; /*year:    2014*/
 104   2          regs[9]=0x80;/*minute alarm disabed*/
 105   2          regs[10]=0x80;/*hour alarm disabed*/
 106   2          regs[11]=0x80;/*day alarm disabed*/
 107   2          regs[12]=0x80;/*weekday alarm disabed*/
 108   2          /*changed to 3 as reset configuration indication.*/
 109   2          regs[13]=0x03;/*CLKOUT is disabled and set to high-impedance*/
 110   2          regs[14]=0x00;/*counterdown timer is disabled */
 111   2          regs[15]=0x00;/*counterdown timer is disabled */
 112   2          ret = Pcf8563WriteBytes(0x00,&regs[0],16);
 113   2        }
 114   1        if(ret != 0) printf("Init 8563 error:ret = %d\r\n",ret);
 115   1        return ret;
 116   1      }
C51 COMPILER V9.50a   RTC                                                                  05/17/2019 16:38:39 PAGE 3   

 117          
 118          int rtc_GetCalendar(struct human_time *ptr)
 119          {
 120   1        //int i;
 121   1        int ret;
 122   1        uint8_t xdata regs[16];
 123   1        ret = Pcf8563ReadBytes(0x00,regs,16);
 124   1        //for(i=0;i<16;i++) printf(" 0x%x",regs[i]); printf("\r\n");
 125   1        if(ret != 0)
 126   1        {
 127   2          printf("Read 8563 error:ret = %d\r\n",ret);
 128   2          return ret;
 129   2        }
 130   1        if(regs[2] & 0x80)
 131   1        {
 132   2          printf("PCF8563 very low power.");
 133   2          return -10;
 134   2        }
 135   1        if(ptr == NULL)
 136   1        {
 137   2          printf("parameter error..");
 138   2          return -11;
 139   2        }
 140   1        ptr->second=Bcd2Bin(regs[2] & 0x7f );
 141   1        ptr->minute=Bcd2Bin(regs[3] & 0x7f );
 142   1        ptr->hour=Bcd2Bin(regs[4] & 0x3f);
 143   1        ptr->day=Bcd2Bin(regs[5] & 0x3f);
 144   1        ptr->month=Bcd2Bin(regs[7] & 0x1f);
 145   1        ptr->year=Bcd2Bin(regs[8]) + 2000;
 146   1        return 0;
 147   1      }
 148          
 149          int rtc_SetCalendar(const struct human_time *pcal)
 150          {
 151   1        int ret;
 152   1        uint8_t xdata regs[9];
 153   1        if(pcal == NULL)
 154   1        {
 155   2          printf("param error.");
 156   2          return -10;
 157   2        }
 158   1        regs[0]=0x00;/*Clock is running*/
 159   1        regs[1]=0x00;/*disable alarm and timer interrupt*/
 160   1        regs[2]=Bin2Bcd(pcal->second);
 161   1        regs[3]=Bin2Bcd(pcal->minute);
 162   1        regs[4]=Bin2Bcd(pcal->hour);
 163   1        regs[5]=Bin2Bcd(pcal->day);
 164   1        regs[6]= 0 ; /*weekday is not implemented */
 165   1        regs[7]=Bin2Bcd(pcal->month);
 166   1        regs[8]=Bin2Bcd(pcal->year-2000);
 167   1        ret = Pcf8563WriteBytes(0x00,regs,9);
 168   1        if(ret != 0) printf("Write 8563 error:ret = %d\r\n",ret);
 169   1        return ret;
 170   1      }
 171          
 172          static uint8_t IsLeapYear(uint16_t year)
 173          {
 174   1        return ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0);
 175   1      }
 176          /*2000-1-1 is Saturday. calc weekday of first day of each year.*/
 177          static uint8_t GetFirstWeekDayOfYear(uint16_t year)
 178          {
C51 COMPILER V9.50a   RTC                                                                  05/17/2019 16:38:39 PAGE 4   

 179   1        uint16_t i;
 180   1        uint32_t total_day = (year - 2000) * 365;
 181   1      
 182   1        for (i = 2001; i < year; i++)
 183   1        {
 184   2          /*Consider leap years.*/
 185   2          total_day += IsLeapYear(i);
 186   2        }
 187   1        return ((total_day + 6) % 7);
 188   1      }
 189          
 190          /*Calc out weekday of calendar day.*/
 191          uint8_t rtc_GetWeekdayOfDay(uint16_t year, uint8_t month, uint8_t day)
 192          {
 193   1        uint32_t days = 0;
 194   1        days = GetFirstWeekDayOfYear(year);
 195   1        switch (month - 1)
 196   1        {
 197   2        case 12:
 198   2          days += 31;
 199   2        case 11:
 200   2          days += 30;
 201   2        case 10:
 202   2          days += 31;
 203   2        case 9:
 204   2          days += 30;
 205   2        case 8:
 206   2          days += 31;
 207   2        case 7:
 208   2          days += 31;
 209   2        case 6:
 210   2          days += 30;
 211   2        case 5:
 212   2          days += 31;
 213   2        case 4:
 214   2          days += 30;
 215   2        case 3:
 216   2          days += 31;
 217   2        case 2:
 218   2          if (IsLeapYear(year))
 219   2            days += 29;
 220   2          else
 221   2            days += 28;
 222   2        case 1:
 223   2          days += 31;
 224   2        }
 225   1        days += day;
 226   1        return (days % 7);
 227   1      }
 228          #if 0
              /*Get total days of a given month.*/
              uint8_t rtc_GetMonthDays(uint16_t year, uint8_t month)
              {
                switch (month)
                {
                case 1:
                case 3:
                case 5:
                case 7:
                case 8:
                case 10:
                case 12:
C51 COMPILER V9.50a   RTC                                                                  05/17/2019 16:38:39 PAGE 5   

                  return 31;
                case 4:
                case 6:
                case 9:
                case 11:
                  return 30;
                case 2:
                  if (IsLeapYear(year))
                    return 29;
                  else
                    return 28;
                }
                return 0;
              }
              #endif
 256          
 257          void rtc_TestMain(unsigned char argc, char *argv[])
 258          {
 259   1        struct human_time ht;
 260   1        char c;
 261   1        unsigned char ret;
 262   1        
 263   1        if(argc == 1) goto _print_usage_;
 264   1      
 265   1        if(strcmp(argv[1],"get") == 0)
 266   1        {
 267   2          printf("press any key to abort...\r\n");
 268   2          for(;;)
 269   2          {
 270   3            time_HoggingDelayMs(1000);
 271   3            rtc_GetCalendar(&ht);
 272   3            printf("%u-%bu-%bu ",ht.year,ht.month,ht.day);
 273   3            printf("WEEK %bu ",rtc_GetWeekdayOfDay(ht.year,ht.month,ht.day));
 274   3            printf("%bu:%bu:%bu \r\n",ht.hour,ht.minute,ht.second);
 275   3            ret = uart1_Read(&c,1);
 276   3            if(ret == 1) break;
 277   3          }
 278   2          return;
 279   2        }
 280   1        else if(strcmp(argv[1],"set") == 0)
 281   1        {
 282   2          int ret;
 283   2          if(argc != 4) goto _print_usage_;
 284   2          ret = sscanf(argv[2],"%u-%bu-%bu",&ht.year,&ht.month,&ht.day);
 285   2          if(ret != 3)  goto _print_usage_;
 286   2          ret = sscanf(argv[3],"%bu:%bu:%bu",&ht.hour,&ht.minute,&ht.second);
 287   2          if(ret != 3)  goto _print_usage_;
 288   2          rtc_SetCalendar(&ht);
 289   2          printf("Set Calendar OK\r\n");
 290   2          return;
 291   2        }
 292   1      _print_usage_:
 293   1        printf("----------------usage----------------------\r\n");
 294   1        printf("%s get\r\n----Get current calendar time.\r\n",argv[0]);
 295   1        printf("%s set 2016-8-3 12:30:45\r\n----Set calendar time.\r\n",argv[0]);
 296   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1805    ----
   CONSTANT SIZE    =    428    ----
   XDATA SIZE       =   ----      41
C51 COMPILER V9.50a   RTC                                                                  05/17/2019 16:38:39 PAGE 6   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      56
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
